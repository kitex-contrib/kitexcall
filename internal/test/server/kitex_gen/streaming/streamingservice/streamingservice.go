// Copyright 2025 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by Kitex v0.13.1. DO NOT EDIT.

package streamingservice

import (
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	kstreaming "github.com/cloudwego/kitex/pkg/streaming"
	streaming "github.com/kitex-contrib/kitexcall/internal/test/server/kitex_gen/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BidirectionalStream": kitex.NewMethodInfo(
		bidirectionalStreamHandler,
		newStreamingServiceBidirectionalStreamArgs,
		newStreamingServiceBidirectionalStreamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
	"ServerStream": kitex.NewMethodInfo(
		serverStreamHandler,
		newStreamingServiceServerStreamArgs,
		newStreamingServiceServerStreamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"ClientStream": kitex.NewMethodInfo(
		clientStreamHandler,
		newStreamingServiceClientStreamArgs,
		newStreamingServiceClientStreamResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
}

var (
	streamingServiceServiceInfo                = NewServiceInfo()
	streamingServiceServiceInfoForClient       = NewServiceInfoForClient()
	streamingServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return streamingServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return streamingServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return streamingServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "StreamingService"
	handlerType := (*streaming.StreamingService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "streaming",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func bidirectionalStreamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*kstreaming.Args)
	if !ok {
		return errors.New("StreamingService.BidirectionalStream is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &streamingServiceBidirectionalStreamServer{st.Stream}
	return handler.(streaming.StreamingService).BidirectionalStream(stream)
}

type streamingServiceBidirectionalStreamClient struct {
	kstreaming.Stream
}

func (x *streamingServiceBidirectionalStreamClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(kstreaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *streamingServiceBidirectionalStreamClient) Send(m *streaming.Message) error {
	return x.Stream.SendMsg(m)
}
func (x *streamingServiceBidirectionalStreamClient) Recv() (*streaming.StreamingResponse, error) {
	m := new(streaming.StreamingResponse)
	return m, x.Stream.RecvMsg(m)
}

type streamingServiceBidirectionalStreamServer struct {
	kstreaming.Stream
}

func (x *streamingServiceBidirectionalStreamServer) Send(m *streaming.StreamingResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *streamingServiceBidirectionalStreamServer) Recv() (*streaming.Message, error) {
	m := new(streaming.Message)
	return m, x.Stream.RecvMsg(m)
}

func newStreamingServiceBidirectionalStreamArgs() interface{} {
	return streaming.NewStreamingServiceBidirectionalStreamArgs()
}

func newStreamingServiceBidirectionalStreamResult() interface{} {
	return streaming.NewStreamingServiceBidirectionalStreamResult()
}

func serverStreamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*kstreaming.Args)
	if !ok {
		return errors.New("StreamingService.ServerStream is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &streamingServiceServerStreamServer{st.Stream}
	req := new(streaming.Message)
	if err := st.Stream.RecvMsg(req); err != nil {
		return err
	}
	return handler.(streaming.StreamingService).ServerStream(req, stream)
}

type streamingServiceServerStreamClient struct {
	kstreaming.Stream
}

func (x *streamingServiceServerStreamClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(kstreaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *streamingServiceServerStreamClient) Recv() (*streaming.StreamingResponse, error) {
	m := new(streaming.StreamingResponse)
	return m, x.Stream.RecvMsg(m)
}

type streamingServiceServerStreamServer struct {
	kstreaming.Stream
}

func (x *streamingServiceServerStreamServer) Send(m *streaming.StreamingResponse) error {
	return x.Stream.SendMsg(m)
}

func newStreamingServiceServerStreamArgs() interface{} {
	return streaming.NewStreamingServiceServerStreamArgs()
}

func newStreamingServiceServerStreamResult() interface{} {
	return streaming.NewStreamingServiceServerStreamResult()
}

func clientStreamHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*kstreaming.Args)
	if !ok {
		return errors.New("StreamingService.ClientStream is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &streamingServiceClientStreamServer{st.Stream}
	return handler.(streaming.StreamingService).ClientStream(stream)
}

type streamingServiceClientStreamClient struct {
	kstreaming.Stream
}

func (x *streamingServiceClientStreamClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(kstreaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *streamingServiceClientStreamClient) Send(m *streaming.Message) error {
	return x.Stream.SendMsg(m)
}
func (x *streamingServiceClientStreamClient) CloseAndRecv() (*streaming.StreamingResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(streaming.StreamingResponse)
	return m, x.Stream.RecvMsg(m)
}

type streamingServiceClientStreamServer struct {
	kstreaming.Stream
}

func (x *streamingServiceClientStreamServer) SendAndClose(m *streaming.StreamingResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *streamingServiceClientStreamServer) Recv() (*streaming.Message, error) {
	m := new(streaming.Message)
	return m, x.Stream.RecvMsg(m)
}

func newStreamingServiceClientStreamArgs() interface{} {
	return streaming.NewStreamingServiceClientStreamArgs()
}

func newStreamingServiceClientStreamResult() interface{} {
	return streaming.NewStreamingServiceClientStreamResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BidirectionalStream(ctx context.Context) (StreamingService_BidirectionalStreamClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(kstreaming.Result)
	err := streamClient.Stream(ctx, "BidirectionalStream", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &streamingServiceBidirectionalStreamClient{res.Stream}
	return stream, nil
}

func (p *kClient) ServerStream(ctx context.Context, req *streaming.Message) (StreamingService_ServerStreamClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(kstreaming.Result)
	err := streamClient.Stream(ctx, "ServerStream", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &streamingServiceServerStreamClient{res.Stream}

	if err := stream.Stream.SendMsg(req); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) ClientStream(ctx context.Context) (StreamingService_ClientStreamClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(kstreaming.Result)
	err := streamClient.Stream(ctx, "ClientStream", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &streamingServiceClientStreamClient{res.Stream}
	return stream, nil
}
